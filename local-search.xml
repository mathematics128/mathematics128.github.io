<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>搭博客还需要技术力吗</title>
    <link href="/%E6%90%AD%E5%8D%9A%E5%AE%A2%E9%9C%80%E8%A6%81%E6%8A%80%E6%9C%AF%E5%8A%9B%E5%90%97/"/>
    <url>/%E6%90%AD%E5%8D%9A%E5%AE%A2%E9%9C%80%E8%A6%81%E6%8A%80%E6%9C%AF%E5%8A%9B%E5%90%97/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面的一些废话">写在前面的一些废话</h2><p>我可能是同龄人里面从小接触电脑就比较多的一类人，小时候玩的很多游戏都来自4399，一个08的童年回忆却和00~05的比较接近。小时候因为家里人的手机都有自己的用处，不会拿给我用，而我自己又没手机，但是家里的电脑因为没人用基本都是闲置，所以我从小电脑用得比手机多。</p><p>桌面基本都是<code>Browser/Server</code>模式嘛，所以小时候用电脑基本就是访问各种网站，像<a href="https://www.4399.com" title="经典4399小游戏">www.4399.com</a>、<a href="https://baidu.com" title="谁都知道的度娘">baidu.com</a>都是从小就会背的域名。上网的时候我都很好奇，这些网站是怎么搭起来的？我能自己搭一个网站吗？这个念头一直困扰了我很久。不记得什么时候，那时候我虽然用电脑的经验丰富，但计算机技术还是纯小白，那时候我就自己到百度上面搜“网站搭建”，在一堆广告里不知道挑了个什么东西，没要账号密码，我就有了自己的“网站”——一个空白模板，都不知道上哪自定义。我看着地址栏那一长串根本记不下来的域名，用鼠标到处乱点，发现根本没有文本输入框，最后放弃了。我当时以为个人是没办法建站的，只有大公司可以，干脆打消了这个念头。</p><p>后来上了初中，知道的东西越来越多，这个念头又重新起来了。初中可以说是我计算机技术突飞猛进的时候，从卸载360到自己美化桌面，从用Typora写笔记到在虚拟机里用Ubuntu。Arch Linux我实机装了不下五遍，算是彻底适应命令行了。后来在找KDE美化教程的时候，我发现了很多个人博客，这些网站明显不是什么公司或组织搭建的，完全是个人的作品，域名也很有个性，有些是<code>*.github.io</code>，也有些是自己买的域名，网站界面也很好看，各具特色。不过网站内容的排版却是清一色的<code>Markdown</code>，这让我开始怀疑这些博客都是用模板搭建的。</p><p>我开始在网上搜索相关内容，出来的结果有用<code>WordPress</code>的，有用<code>Typecho</code>的，但是因为这俩都是动态网站，涉及的技术我都看不太懂，而且都要自己买域名买VPS，还是把我劝退了。没有找到中意的框架，我还是又回去看别人的博客。</p><p>前不久，我又回去看<a href="https://acherstyx.github.io/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/" title="看了不下五遍">AcherStyx的KDE美化教程</a>，这位大佬的博客样式就是我想要的效果。翻到页底的时候，我发现下面有一行小字：</p><p><img src="AcherStyxloveHexo&amp;Fluid.png" alt="框架和主题名字链接都摆在这里o(TヘTo)"></p><p>我真的是……之前一直都没留意过啊！！！后来的事情你们都知道了，于是有了这个博客。废话到此结束，开始正题。</p><h2 id="现如今个人博客的搭建门槛">现如今个人博客的搭建门槛</h2><p>说实话，整个建站流程下来，我意外地没有感到什么阻力。除了一开始Debian的软件源太老了，装不上Node.js，把WSL发行版换成了Arch之外，装Hexo，<code>hexo init</code>，装Fluid主题，改配置文件，写文章，部署到Github，一气呵成。当我打开自己博客的链接时，自己都不相信自己的眼睛。我没有前端经验，甚至完全没有接触过前端和<code>HTML5</code>开发，却自己搭起来一个这么漂亮的网站，究其原因，肯定不是我技术过硬，而是Hexo框架和Fluid主题帮我把大部分工作都做好了，剩下需要我做的部分都是一些很简单的东西。就你们现在看到的网站页面，100%的样式都是它们做的，我只不过是改一下相关的文字和图片。包括很多看起来要自己写的东西也都是自动生成的，比如右边的目录，我只要把文章内各章节的标题写好就会自动生成，还有分类和标签也都是内置的功能，很方便，很傻瓜式。</p><p>那搭博客究竟还剩下多少技术门槛呢？以我的这个博客举例，主要是以下几点：</p><h3 id="命令行操作">命令行操作</h3><p>不用把<code>bash</code>脚本玩出花，也不需要掌握<code>Powershell</code>的一万种用法，但是要基本适应命令行的操作模式。一个黑乎乎的控制台窗口，你打一条命令回车，它就按照你说的做，不能用鼠标点点点，这就是命令行。适应这种模式并不难，<s>只需要像我一样把Arch装上个五六遍</s>，多打几回命令就适应了。用Windows的<code>cmd</code>还是Linux的<code>bash</code>都随意，但是一些通用的基本命令，像<code>mv</code> <code>rm</code> <code>cp</code> <code>cd</code> <code>pwd</code> <code>mkdir</code> <code>echo</code> <s><code>vim</code></s> 也要基本掌握，不然操作很难过的。</p><h3 id="Markdown-语法">Markdown 语法</h3><p>HTML可不支持你直接把Word文档塞到网页里面，所以要想写出段落和格式，就得用Markdown语法。引用菜鸟教程的介绍：</p><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，被广泛运用于各种类型的网站。</p></blockquote><p>简单来说，就是用一些简单的符号来标记格式。比如一级标题就是 “# 一级标题”，渲染出来就是最大标题的形式。这篇文章为了美观，用的都是二三级标题。还有其他的样式，像<strong>粗体</strong>、<em>斜体</em>、<s>删除线</s>、代码块<code>codeblock</code>、<a href="https://mathematics128.github.io/2023/07/23/%E6%90%AD%E5%8D%9A%E5%AE%A2%E9%9C%80%E8%A6%81%E6%8A%80%E6%9C%AF%E5%8A%9B%E5%90%97/#Markdown%E8%AF%AD%E6%B3%95" title="原地tp">超链接</a>等等，还有图片、上面的引用块，都可以用Markdown里一些简单的语法实现。</p><h3 id="YAML-语法">YAML 语法</h3><p>这个和上面的Markdown又不一样，这个是配置文件的语法，简单理解就是改设置用的。YAML真的没什么好说的，一看就懂，基本就是自然语言。举例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">搭博客还需要技术力吗</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-07-23 16:52:38</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">建站笔记</span><br><span class="hljs-attr">tags:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">杂谈</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">建站</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">无复杂技术请放心食用</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">讨论一下现如今，自己动手搭个博客的技术门槛还剩多高。</span><br></code></pre></td></tr></table></figure><p>这个是本文章的设置项。除了中英文对应关系要翻翻文档，就是一目了然。标题是什么，日期多少，分类和标签设置成什么，什么内容作为摘要显示在首页，清晰无比，所以没什么学习成本。</p><h3 id="Git-基本操作">Git 基本操作</h3><p>Git是一个很厉害的代码仓库管理系统，世界上最大的代码仓库网站就叫GitHub（Git中心），但是它各种纷繁复杂的命令也是全世界程序员一个很头疼的点。不过这跟我们没关系，我们需要掌握的命令很基本。有多基本呢，只要能够<code>git push</code>成功就行了，多的都是多余的。而你把配置文件弄好之后，甚至都不需要自己手打git命令了，只需要六个字母两个空格一个“-”：<code>hexo g -d</code>，就可以全自动部署，完事网站就可以访问了。</p><h3 id="GitHub-使用经验">GitHub 使用经验</h3><p>如果要把网站托管到Github上面，你也得会用GitHub。这里使用经验就是一个玄学的东西，我一时间肯定讲不出来要会什么，但是确确实实要知道一些什么。注册一个账号，开始探索，时间长了，自然就有经验了。</p><h3 id="最重要的东西">最重要的东西</h3><p>虽然我上面列了那么一大堆，但其实都不重要。最重要的，其实是自己跟着文档实操的能力，以及碰到问题自己动手解决的能力。整个建站过程，我一直都在跟着<a href="https://hexo.io/zh-cn/docs/">Hexo的官方文档</a>和<a href="https://hexo.fluid-dev.com/docs/">Fluid的用户手册</a>一步步操作。说实话，这俩都是中文，不存在语言障碍，而且每一步文档都写得很清楚明白，就算没什么基础，跟着文档来，基本不会出什么问题。就算遇到了一些常见问题，文档里都写明了，各种配置选项也都有对应的解释。</p><p><img src="2c6b995063b380235cd2d49f3d071d2c.jpg" alt="很多人就是不看文档.jpg 来自manim幼儿园"></p><p>也有一些文档之外的问题，比如第二节开头提到的Debian软件源太老，装的Node.js版本太旧用不了Hexo，我也上网查找了一下相关资料，就是要换Nodesource源，但我不知道因为什么原因就是换不了（可能是网络问题），最后换了Arch。这是一种解决方法，主要图个方便和顺手。类似的问题很多，像Git用ssh死活连不上（换用https），用https又要求每次都要输口令（用GCM，Git凭据管理器），以及有一次<code>hexo s</code>之后一直报错<span class="label label-danger">Cannot find /</span>，修了半天发现不能没有文章，否则不会生成主页😂最后随便整了一个占位文章上去就好了。折腾技术的过程中这样的闹心事很多，一定要不断地动手尝试，善用搜索，善用互联网，时间长了，再结合自己的经验，事情会越办越顺手。</p><p align="center"><b><font size=4> <a href="/%E6%90%AD%E5%8D%9A%E5%AE%A2%E9%9C%80%E8%A6%81%E6%8A%80%E6%9C%AF%E5%8A%9B%E5%90%97/chatai-659120429622/" title="">使用ChatGPT查东西珍贵记录</a> </font></b></p><p>说这些能力是最重要的东西，是因为，只要你真的有一颗愿意折腾的心，以及遇到问题时利用手边所有资源解决问题的能力，其实上文提到的所有技术，什么Git、Markdown，都能做到从零学会，而且即使遇到了更难的问题，需要更高的技术，也一定能学得会。</p><p>总之，现在自己动手搭一个博客的技术门槛真的越来越低了，即使你是一个纯小白，学习一些基本常识之后，跟着文档一步步来，也是没问题的。99%的工作都由框架模板给你做了，一些原本没法实现的功能也有各种插件，比如新增的评论功能，看起来要做的东西挺多，实际上也有预置的插件把大部分配置都做好了，只要简单的配置一些参数就可以正常使用。</p><div class="note note-info">            <p><strong>我们生活在一个最好的时代：</strong><br><strong>前辈们早早为我们铺好了一条路，而我们也一定要沿着这条路坚定不移地走下去。</strong></p>          </div>]]></content>
    
    
    <categories>
      
      <category>建站笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>杂谈</tag>
      
      <tag>无复杂技术请放心食用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于网站图标</title>
    <link href="/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87/"/>
    <url>/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<p>建好站之后，网站的默认图标是Fluid的，看着很别扭，于是打算自己动手做个图标。图标不用太复杂，就一个六芒星就好，<s>反正是凑数的</s>。可渲染这么一个简单的几何图形要是动用PS就太麻烦了。我很快想到了manim，渲染几何图形是它的长项啊。正巧我这边把manim更新到master分支的版本之后渲染出了些问题，每一根线条都变成了淡出的，就像这样：</p><p><img src="252946116-26ab93aa-3da3-43c7-9ab7-65865f52b500.png" alt="珍贵影像"></p><p>在manim群里反馈过后，有人说这样子还蛮帅的。正好可以把这个效果用到图标上面。以下为manim代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> manimlib <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Favicon</span>(<span class="hljs-title class_ inherited__">Scene</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">construct</span>(<span class="hljs-params">self</span>):<br>        a = np.array([<span class="hljs-number">0.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">0.</span>])<br>        b = np.array([<span class="hljs-built_in">float</span>(math.sqrt(<span class="hljs-number">3</span>)), <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>])<br>        c = np.array([<span class="hljs-built_in">float</span>(math.sqrt(<span class="hljs-number">3</span>)), -<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>])<br>        d = np.array([<span class="hljs-number">0.</span>, -<span class="hljs-number">2.</span>, <span class="hljs-number">0.</span>])<br>        e = np.array([<span class="hljs-built_in">float</span>(-math.sqrt(<span class="hljs-number">3</span>)), -<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>])<br>        f = np.array([<span class="hljs-built_in">float</span>(-math.sqrt(<span class="hljs-number">3</span>)), <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>])<br>        abcdef = Polygon(a, b, c, d, e, f).set_stroke(BLUE, width=<span class="hljs-number">25</span>)<br>        ace = Polygon(a, c, e).set_stroke(BLUE, width=<span class="hljs-number">50</span>)<br>        bdf = Polygon(b, d, f).set_stroke(BLUE, width=<span class="hljs-number">50</span>)<br>        self.add(VGroup(abcdef, ace, bdf).scale(<span class="hljs-number">1.5</span>))<br></code></pre></td></tr></table></figure><p>渲染效果如图：</p><p><img src="Favicon.png" alt="还挺不错的"></p><p>适当裁剪就得到网站的图标啦~</p>]]></content>
    
    
    <categories>
      
      <category>建站笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>icon</tag>
      
      <tag>图标</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
